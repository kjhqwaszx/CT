< 디자인 패턴 > https://beomy.tistory.com/43
 : 개발 과정에서 공통으로 발생하는 문제를 해결하기 위해 사용되는 패턴. 디자인 패턴은 코드로 구현된 구현체가 아니라
   문제 해결을 위한 패턴이다.본인의 개발환경에 맞게 사용해야한다.

< 패턴 종류 >  
- MVC(Model + View + Controller)
 1. 구조
  - Model: 어플맅케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분
  - View : 사용자에서 보여지는 UI부분
  - Controller : 사용자의 입력(Action)을 받고 처리하는 부분.

 2. 동작
  - 사용자의 Action들은 Controller에 들어오게 된다.
  - Controller는 Action을 확인하고, Model을 업데이트한다.
  - Controller는 model을 나타내줄 view를 선택한다.
  - view는 model을 이용하여 화면을 나타낸다.
    * view가 업데이트 되는 방법
      - View가 Model을 이용하여 직접 업데이트 한다.
      - Model에서 View에게 Notify하여 업데이트 한다.
      - view가 Polling으로 주기적으로 Model의 변경을 감지하여 업데이트한다.
              Action 
                V
   View <---- Controller ----> Model

 3. 특징
  - Controller는 여러개의 View를 선택할 수 있는 1:n 구조이다.
  - Controller는 View를 선택할 뿐 직접 업데이트하지는 않는다.

 4. 장단점
  - 가장 단순한 디자인 패턴이므로 보편적으로 사용된다.
  - View 와 Model 사이의 의존성이 높아 어플리케이션이 커지면 복잡해진다.

- MVP (Model + View + Presenter)
 1. 구조
  - Model: 어플맅케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분
  - View : 사용자에서 보여지는 UI부분
  - Presenter : View에서 요청한 정보로 Model을 가공하여 View에 전달해주는 부분. View와 Model을 붙여주는 역할

 2. 동작
  - 사용자의 Action들은 View를 통해 들어오게 된다.
  - View는 데이터를 Presenter에게 요청한다.
  - Presenter는 Model에게 데이터를 요청한다.
  - Model은 Presenter에서 요청받은 데이터를 응답한다.
  - Presenter는 View에게 데이터를 응답한다.
  - View는 Presenter가 응답한 데이터를 이용하여 화면을 나타낸다.
      
   Action > View <----> Controller <----> Model

 3. 특징
  - Presenter는 View와 Model의 인스턴스를 가지고 있어 둘을 연결하는 역할을한다.
  - Presenter와 View는 1:1 관계이다.?

 4. 장단점
  - View 와 Model의 의존성이 없다. ( Presenter를 통해서만 데이터를 전달받기 때문)
  - View 와 Presenter의 의존성이 높다.

- MVVM (Model + View + View Model)
 1. 구조
  - Model: 어플맅케이션에서 사용되는 데이터와 그 데이터를 처리하는 부분
  - View : 사용자에서 보여지는 UI부분
  - View Model : View를 표현하기 위해 만든 Model.
  
  2. 동작
  - 사용자의 Action들은 View를 통해 들어오게 된다.
  - View에 Action이 들어오면, Command 패턴으로 View Model에 Action을 전달한다.
  - View Model은 Model에게 데이터를 요청한다.
  - Model은 View Model에게 요청받은 데이터를 응답한다.
  - View Model은 응답받은 데이터를 가공하여 저장한다.
  - View는 View Model과 Data Binding하여 화면을 나타낸다.

  3. 특징
   - Command 패턴과 Data Binding을 이용하여 View와 View Model사이의 의존성을 없앴다.
   - View Model과 View는 1:n 관계이다.

  4. 장단점
   - 각각의 독립적이기 떄문에 의존성이 없고 모듈화하여 개발할 수 있다.
  
  

