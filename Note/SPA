< SPA (SinglePageApplication) >
 : 페이지 최초 접속 시에만 서버에서 html을 받아 렌더링 시키고 이후 변경된 데이터만 서버에서 받아와 렌더링 한다.
   기존에는 페이지 이동시, 서버에서 HTML파일을 만들어 보내주고 브라우저(클라이언트)가 HTML을 반영하는 방식이였다. (새로고침 발생)
   ( 데이터까지 세팅해서 html을 던져주고 브라우저는 단순히 뿌려주기만 함.)
   SPA에서는 페이지 이동 시 변경되는 부분만 json으로 받아온 뒤 브라우저의 자바스크립트에서 받아온 JSON을 토대로
   DOM에 변경된 부분만 렌더링해준다. 이때 SPA는 HTML렌더링을 서버가 하는게 아닌 클라이언트가 받은 JSON을 토대로
   하기때문에 CSR(Client Side Rendering)방식으로 렌더링한다고 한다.
   ( 데이터의 경우 javaScript의 RestAPI로 처리 )
 
 * 클라이언트에서 서버에 데이터를 요청할 때 AJAX를 사용하고, 서버쪽에선 JSON으로 넘겨준다.
 * AJAX : 페이지를 변경하지 않고 동일한 페이지에서 오로지 자바스크립트를 통해 페이지의 내용물을 바꾸는것

 보통 리액트에서는 axios라는 api를 사용한다. REST API + AJAX 를 axios.get(), axios.post()로 구현

 < SPA의 장단점 >
  * 장점
   - 페이지의 필요한 부분만 업데이트하기때문에 트래픽이 적고 페이지 이동이 빠르다.
   - 최조 접속시 필요한 모든 정적 리소스들을 다운받고 이미 방문한 페이지도 캐싱한다.
   - 모듈화나 컴포넌트화를 통해 유지보수를 쉽게 만들고 개발 속도를 빠르게 만든다.
  
  * 단점
   - 리소스를 초기에 다운로드 받기때문에 초기 구동속도가 느리다.


   

