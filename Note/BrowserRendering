<브라우저의 작동 원리>_ https://boxfoxs.tistory.com/408 ,  https://it-ist.tistory.com/110
 -> 브라우저 내 렌더링 엔진을 통해 웹서버에서 전달받은 HTML 문서를 렌더링시킨다.

< 렌더링 엔진 작동 방식 >
 -> 렌더링 엔진은 브라우저마다 다르다. ( 파이어폭스 : 게코[Gecko], 사파리: 웹킷, 크롬: 웹킷을 fork한 블링크[Blink] )
 1. HTML파싱 후 DOM Tree 만들기
    : 렌더링 엔진은 우선 네트워크 레이어를 통해 받은 HTML문서(소스코드)를 파싱하여 각 요소들을 DOM Tree의 각 노드들로 전환한다.
     DOM 이란 Document Object Model의 준말로 html문서를 오브젝트 모델의 형태로 바꿔놓은 것.
     (HTMLHtmlElement > HTMLBodyElement > HTMLDivElement > HTMLImageElement)
 2. 렌더트리 만들기
    : Dom Tree를 구성한 후, CSS/Style 데이터를 파싱하고 그 스타일 데이터들로 렌더트리를 만든다.
      Dom 트리가 웹 상에 나타날 내용을 구성한다면 렌더 트리는 시각적요소를 지정한다. 

 3. 렌더트리 레이아웃 만들기
    : 브라우저의 뷰포트(Viewport)내에서 DOM 트리의 각 노드들의 정확한 위치와 크기를 계산한다.
      뷰포트란 그래픽이 표시되는 브라우저의 영역을 말하고, 디바이스에 따라 그 값이 달라진다.

 4. 렌더 트리 페인팅
    : 레이아웃까지 구성되면, 각 노드들으 정해진 스타일 및 위치값대로 화면에 그려준다.

<렌더링 최적화 - Reflow, Repaint 줄이기>

 - Reflow : 특정 Acction이나 Event에 따라 html요소의 크기나 위치 등 레이아웃 요소가 변경되면
            렌더트리 레이아웃 과정을 다시 수정하게된다. 이렇게 되면 각 요소들의 위치와 크기를 다시
            계산하게된다. 이 과정을 Reflow라고 한다.
 - Repaint : Reflow된 Render Tree를 다시 화면에 그려주는 과정.

< Virtual Dom _ React, Angular  >
DOM에 변화가 생기면 렌더트리를 재생성한다(모든 요소들의 스타일이 다시 계산됨.) 즉, Reflow, Repaint가 반복
복잡한 SPA에서는 dom조작이 많이 발생하기 때문에 브라우저에서 많은 연산이 이루어지고 느려질 수 있다.
Virtual Dom은 뷰에 변화가 생기면 실제 DOM에 적용되기전 가상의 DOM에 먼저 적용시키고 최종적인 결과를
실제 DOM으로 전달해줌으로써 브라우저 내에서 발생하는 연산의 양을 줄여 성능을 개선시킨다.






