< TypeScript > _ https://heropy.blog/2020/01/27/typescript/

 - C#과 Java 같은 체계적이고 정제된 언어들에서 사용하는 타입 시스템은 높은 가독성과 코드 품질 등을 제공할 수 있고
    런타임이 아닌 컴파일 환경에서 에러가 발생해 오류를 더욱 쉽게 잡아낼 수 있다.
 - 자바스크립트는 타입 시스템이 없는 동적 프로그래밍 언어로, 자바스크립트 변수는 문자열, 숫자 등 여러 타입의 값을 가질 수 있다.
   비교적 유연하게 개발할 수 있는 환경을 제공하는 한편 런타임 환경에서 쉽게 에러가 발생할 수 있다는 단점을 가진다.
 - 타입스크립트는 이러한 자바스크립트에 강한 타입 시스템을 적용해 대부분의 에러를 컴파일 환경에서 코드를 입력하는 동안 체크할 수 있다.
 - 일반 변수, 매개변수(파라메터), 객체속성 등에 :TYPE과 같은 형태로 타입을 지정할 수 있다.

< 기능 >
 - 크로스 플랫폼 지원 : 자바스크립트가 실행되는 모든 플랫폼에서 사용가능.
 - 객체지향 언어 : 클래스, 인터페이스, 모듈 등의 강력한 기능을 제공하며 순수한 객체지향 코드를 작성할 수 있음
 - 정적 타입 : 정적 타입을 사용하기 떄문에

< 사용 >
 - 불린형 => isBoolean: boolean = false
 - 숫자형 => isNumber: number = 6;
 - 문자열 => isString: string ='Red'
 - 배열(문자열) => strAry: string[] = ['a', 'b', 'c']
 - 배열(숫자) => numAry: number[] = [1, 2, 3]
 - 배열(숫자,문자) => stNumArray: (number|string)[] = ['appple', 1, 2,'Red']
 - 배열(혼합) => array: any[] =[0,1,{},[],'str',false]
 - 배열(읽기전용)
   let arrA: readonly number[] = [1,2,3]
   arrA[0] = 4 /// 에러
   
 - 인터페이스나 커스텀 타입 사용가능
  interface IUser{
      name: string,
      age: number,
      isValid: boolean
  }
  let userArr: IUser[] = [
      {
          name: 'Neo',
          age: 85,
          isValid: true
      },
      {
          name: 'Lewis',
          age: 52,
          isValid: false
      }
  ]

function add(a: number. b: number){
        return a+b;
    }
    const sum: number = add(1,2)
--------------------------------------

< 튜플 >
 - Tuple 타입은 정해진 타입과 고정된 길이의 배열이다.
    let isTuple: [string, number] //isTuple[0]는 문자, [1]은 숫자형, 배열의 길이는 2여야 한다.
    isTuple=['a',1] // OK
    isTuple=[1,'a'] // X
    isTuple=['a', 1, 2] // X

   * push와 splice 등을 통해 값 추가 가능.
   isTuple.push(3) // 'a',1',3
   isTuple.push(true) // error

   * 값으로 타입을 대신할 수 있다.
    let tuple: [1, number];
    tuple=[1,2] // OK
    tuple=[2,3] // X

